import numpy as np
import random as rd
import matplotlib.pyplot as plt

n = 20
m = 20
Mage = np.zeros((n,m), dtype=int) #Matrice de l'age des différentes structures (plus vieux plus on s'éloigne du centre)
Mheight = np.zeros((n,m), dtype=int) #Hauteur des constructions 0 pour les routes et 6 à 120(nb de dizaines de m)
# 0 routes, 6-12m pour les maisons, 12-20m pour les immeubles, 30-120m pour les grattes ciels
MCity = np.zeros((n,m), dtype=int) #Matrice de la ville, 1=route, 2/3/4=batiments (maisons, immeuble), 5=zones de refuges, 6=zones de transport
MGround = np.zeros((n,m), dtype=int) #Matrice du sol

#Aurelien
import numpy as np
import random
import matplotlib.pyplot as plt

def cityConcentric(n,m, graph=False):
    #len(matrice) >= 10
    if n%2 == 0:
        n=n+1
        m=m+1
    grid = np.zeros((n,m), dtype=int) 
    rgrid = np.zeros((n,m), dtype=int) 
    M = [n//2,n//2]
        
    circles = {}
    for i in range(n//12,n//2,n//10):
        circles[i] = [[M[0],M[1]],i]
    
    xx = np.arange(grid.shape[0])
    yy = np.arange(grid.shape[1])
    for val in circles.values():
        radius = val[1]
        inside = (xx[:, None] - val[0][0])**2 + (yy - val[0][1])**2 <= radius**2
        grid = grid | inside
        rgrid += grid
    if graph:
        plt.imshow(rgrid)
        plt.show()
    return rgrid

def densite1(M,dm,dp):
    n=len(M)
    m = n//2
    for i in range(m):
        for j in range(m):
            if(M[i][j]>0):
                L=[M[i][j]]*(M[i][j]*dm)+[0]*dp
                M[i][j]=random.choice(L)
                M[n-i-1][n-j-1]=M[i][j]
                M[n-i-1][j]=M[i][j]
                M[i][n-j-1]=M[i][j]
    plt.imshow(M)
    plt.show()

def densite2(M,dm,dp):
    #plus lent
    n=len(M)
    m = n//2
    for i in range(m):
        for j in range(m):
            if(M[i][j]>0):
                L=[M[i][j]]*(M[i][j]*dm)+[0]*dp
                M[i][j]=random.choice(L)
                M[n-i-1][n-j-1]=random.choice(L)
                M[n-i-1][j]=random.choice(L)
                M[i][n-j-1]=random.choice(L)
    plt.imshow(M)
    plt.show()
    
def cityRoad1(city,e, graph=False):
    n=len(city)
    x = np.zeros((n,1), dtype=int) 
    M = n//2
    j = 1
    A = 1
    while(A<M):
        x[M+A] = -1
        x[M-A] = -1
        A += j
        j += e
    #changer aussi les valeurs de city en même temps
    road, roadT = np.meshgrid(x, x)
    road = road+roadT
    if graph:
        print(road)
        plt.imshow(road)
        plt.show()
    return road

def cityRoad2(city,e, graph=False):
    n=len(city)
    x = np.zeros((n,1), dtype=int) 
    M = n//2
    A = 1
    while(A<M):
        x[M+A] = -1
        x[M-A] = -1
        A += e
    #changer aussi les valeurs de city en même temps
    road, roadT = np.meshgrid(x, x)
    road = road+roadT
    if graph:
        plt.imshow(road)
        plt.show()
    return road

def matrice_up(M1,M2):
    #lent
    plt.imshow(M2)
    plt.show()
    for i in range(len(M1)):
        for j in range(len(M1)):
            if(M1[i][j])!=0:
                M2[i][j]=M1[i][j]
    plt.imshow(M2)
    plt.show()

def matrice_up2(M1,M2):
    #plus rapide mais symmétrique
    plt.imshow(M2)
    plt.show()

    for i in range(len(M1)):
        if(M1[0, i])!=0:
                M2[:, i]=M1[: ,i]
                M2[i, :]=M1[i, :]
    plt.imshow(M2)
    plt.show()

            
def build1(M):
    #version symmétrique
    n=len(M)
    m = n//2
    for i in range(m):
        for j in range(m):
            if(M[i][j]>0):
                M[i][j]=random.choice([M[i][j],random.randint(M[i][j]-1,M[i][j]+1)])
                M[n-i-1][n-j-1]=M[i][j]
                M[n-i-1][j]=M[i][j]
                M[i][n-j-1]=M[i][j]
    plt.imshow(M)
    plt.show()

def build2(M):
    #version lente
    n=len(M)
    m = n//2
    for i in range(m):
        for j in range(m):
            if(M[i][j]>0):
                M[i][j]=random.choice([M[i][j],random.randint(M[i][j]-1,M[i][j]+1)])
                M[n-i-1][n-j-1]=random.choice([M[n-i-1][n-j-1],random.randint(M[n-i-1][n-j-1]-1,M[n-i-1][n-j-1]+1)])
                M[n-i-1][j]=random.choice([M[n-i-1][j],random.randint(M[n-i-1][j]-1,M[n-i-1][j]+1)])
                M[i][n-j-1]=random.choice([M[i][n-j-1],random.randint(M[i][n-j-1]-1,M[i][n-j-1]+1)])
    plt.imshow(M)
    plt.show()
    
g = cityConcentric(10,10)
plt.imshow(g)
plt.show()
print("densité")
densite2(g,1,2)

print("buildings")
#build1(g)
build2(g)
print("road")
r = cityRoad2(g,5,False)  
matrice_up2(r,g)
 
n=len(g)
m = n//2
print(g[m-4:m+5,m-4:m+5])
#matrice_up(r,g) 
#aurelien

def city(matrice):
    #len(matrice) >= 10
    grid = matrice
    rgrid = matrice
    M = [len(matrice)//2,len(matrice)//2]
    if n%2 == 0:
        M[0] -= 0.5
        M[1] -= 0.5
    circles = {}
    for i in range(n//12,n//2,n//10):
        circles[i] = [[M[0],M[1]],i]
    
    xx = np.arange(grid.shape[0])
    yy = np.arange(grid.shape[1])
    for val in circles.values():
        radius = val[1]
        inside = (xx[:, None] - val[0][0])**2 + (yy - val[0][1])**2 <= radius**2
        grid = grid | inside
        rgrid += grid
    #print(matrice)
    plt.imshow(rgrid)
    plt.show()
    return rgrid


def cityground(matrice):
    grid = matrice
    rgrid = matrice
    x = rd.randint(0,len(matrice)-1)
    y = rd.randint(0,len(matrice)-1)
    M = [x,y]
    
    #circles = {'c1':[[M[0],M[1]],1],'c2':[[M[0],M[1]],2],'c3':[[M[0],M[1]],3]}
     
    circles = {}
    for i in range(1,len(matrice)//2):
        circles[i] = [[M[0],M[1]],i]
    
    xx = np.arange(grid.shape[0])
    yy = np.arange(grid.shape[1])
    for val in circles.values():
        radius = val[1]
        inside = (xx[:, None] - val[0][0])**2 + (yy - val[0][1])**2 <= radius**2
        grid = grid | inside
        rgrid += grid
        #print(rgrid)
        #print("\n")
    #plt.imshow(rgrid)
    #plt.show()
    return rgrid

    
def perturbation(matrice):
    for i in range(len(matrice)*(len(matrice)//2)):
        x = rd.randint(0,len(matrice)-1)
        y = rd.randint(0,len(matrice)-1)
        cgt = rd.randint(-1,1)
        matrice[x][y] += cgt
        #print("point", matrice[x][y])
        #print("x =", x, "y =", y, "changement =", cgt)
    print(matrice)
    #print(grid)
    plt.imshow(matrice)
    plt.show()
    return matrice


class perso:
    def __init__(self, sexe, age, pos, mobi, transp, capital):
       self.sexe = sexe
       self.age = age
       self.pos = pos
       self.mobi = mobi
       self.transp = transp
       self.capital = capital
       
    
       
        

city(MCity)
MGround = cityground(MGround)
perturbation(MGround)





"""
import matplotlib.pyplot as plt

n=100
m=100
grid = np.zeros((n,m), dtype=np.bool)
square_length = 0.5
M = (n//2,m//2)
print(M)
circles = {'c1':[[M[0],M[1]],1.5]}

# Generate arrays of indices/coordiates so we can do the
# calculations the Numpy way, without resorting to loops
# I always get the index order wrong so double check...
xx = np.arange(grid.shape[0])
yy = np.arange(grid.shape[1])

for val in circles.values():
radius = val[1]
# same index caveat here
# Calling Mr Pythagoras: Find the pixels that lie inside this circle
inside = (xx[:, None] - val[0][0])**2 + (yy - val[0][1])**2 <= radius**2

# do grid & inside and initialize grid with ones for intersection instead of union
grid = grid | inside

plt.imshow(grid)
plt.show()"""
